{"remainingRequest":"D:\\kevin\\proyectos\\vuejs\\EcomerceFrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\kevin\\proyectos\\vuejs\\EcomerceFrontend\\src\\components\\main\\Toolbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\kevin\\proyectos\\vuejs\\EcomerceFrontend\\src\\components\\main\\Toolbar.vue","mtime":1591123742674},{"path":"D:\\kevin\\proyectos\\vuejs\\EcomerceFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580396460146},{"path":"D:\\kevin\\proyectos\\vuejs\\EcomerceFrontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1580396457614},{"path":"D:\\kevin\\proyectos\\vuejs\\EcomerceFrontend\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1580396518341},{"path":"D:\\kevin\\proyectos\\vuejs\\EcomerceFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1580396460146},{"path":"D:\\kevin\\proyectos\\vuejs\\EcomerceFrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1580396514635}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {categoryParentUrl,carritoUrl} from '@/packages/config'\r\nexport default {\r\n    data () {\r\n      return {\r\n        tabs: null,\r\n        searchField:'',\r\n        categories: [],\r\n      }\r\n    },\r\n    created(){\r\n      // if(this.$store.state.auth.token !==null){\r\n      this.fillCategory()\r\n      this.fillCarrito()\r\n      // }\r\n    },\r\n    methods:{\r\n      fillCategory(){\r\n          this.$myApi.get(categoryParentUrl)\r\n          .then(response =>{\r\n            // console.log('categorias toolbar',response )\r\n            this.categories = response.data\r\n          })\r\n        \r\n      },\r\n      //esto lo utilizo solo para hacer consulta cuando hay dos carrito distinto \r\n      getCarritoByPedidoId(pedido_id){\r\n        return new Promise((resolve, reject) => {\r\n          this.$myApi.get(carritoUrl + '/'+ pedido_id)\r\n          .then(response =>{\r\n            // console.log('carrito ',response)\r\n            resolve(response.data.carrito)\r\n            // return response.data.carrito\r\n          })\r\n        })\r\n      },\r\n      search(){\r\n        if(this.searchField == null || this.searchField == \"\"){\r\n          this.$router.push({name:'mainPage'})\r\n        }else{\r\n          this.$router.push({ name: 'search', query: { q: this.searchField } })\r\n        }\r\n      },\r\n      fillCarrito(){\r\n        var pedido_id = localStorage.getItem('pedido_id')\r\n        var token = localStorage.getItem('access_token')\r\n\r\n        if(pedido_id == null && token != null){\r\n          this.$store.dispatch('selectPedidoByUserId')\r\n          .then(response => {\r\n          console.log('pedidoId null y toke not null',response) \r\n              if(response !== null){\r\n                this.$store.dispatch('selectCarritoByPedidoId',response.id)\r\n                .then(response =>{\r\n                console.log('carrito ',response)\r\n              })\r\n            }\r\n          })\r\n        }else if(pedido_id != null && token != null){\r\n          this.$store.dispatch('selectPedidoByUserId')\r\n          .then(response1 => {\r\n          console.log('pedidoId null y toke not null 1',response1) \r\n              if(response1 !== null){\r\n                if(response1.id !== parseInt(pedido_id)){\r\n                  //aqui solo ulitizo el metodo getCarritoByPedidoId por que solo quiero el resultado de \r\n                  //ambos carrito para luego hacer una fusion\r\n                  let userCart\r\n                  let oldCarrito\r\n                  this.getCarritoByPedidoId(parseInt(response1.id))\r\n                  .then(responseUser=>{\r\n                    userCart = responseUser\r\n                    this.getCarritoByPedidoId(parseInt(pedido_id))\r\n                    .then(responseUser=>{\r\n                      oldCarrito = responseUser\r\n                      console.log('old carrito', oldCarrito)\r\n                      console.log('userCart ', userCart)\r\n                      for(var index in oldCarrito){\r\n                        let find =  userCart.find(file => file.product_id !== oldCarrito[index].product_id)\r\n                        if(find){\r\n                          let objCart = {\r\n                            product_id:     oldCarrito[index].product_id, \r\n                            pedido_id:      find.pedido_id,\r\n                            quantity:       oldCarrito[index].quantity,\r\n                            price:          oldCarrito[index].price,\r\n                          }\r\n                          this.$store.dispatch('createAndUpdateCarrito',objCart)\r\n                        }\r\n                      }\r\n                      this.$store.dispatch('deletePedidoAndCarritoByPedidoId',oldCarrito[index].pedido_id)\r\n                      .then(responseDelete=>{\r\n                        console.log('se elimino',responseDelete)\r\n                      })\r\n                    });\r\n                  });\r\n                }else{\r\n                this.$store.dispatch('selectCarritoByPedidoId',response1.id)\r\n                .then(response3 =>{\r\n                console.log('carrito ',response3)\r\n                })\r\n              }\r\n            }\r\n        })\r\n        }else if(pedido_id != null && token == null){\r\n          this.$store.dispatch('selectPedidoById',pedido_id)\r\n          .then(response => {\r\n            console.log('pedidoId not null y toke null 2',response) \r\n              if(response !== null){\r\n                // this.$store.commit('selectPedidoByUserId',response)\r\n                this.$store.dispatch('selectCarritoByPedidoId',response.id)\r\n                .then(response1 =>{\r\n                console.log('carrito ',response1)\r\n              })\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n}\r\n",{"version":3,"sources":["Toolbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"Toolbar.vue","sourceRoot":"src\\components\\main","sourcesContent":["<template>\r\n  <v-card dark class=\"primary\"> \r\n    <v-layout row wrap  >\r\n      <v-flex xs6 sm2 md2 order-xs1 order-sm1 order-md1>\r\n        <!-- <v-card dark color=\"primary\">\r\n          <v-card-text class=\"px-0\">Trovare</v-card-text>\r\n        </v-card> -->\r\n        <v-card-text class=\"text-md-center\">\r\n          <router-link class=\"estiloTitulo\" :to=\"{ name: 'mainPage' }\"><span> Trovare</span></router-link>\r\n          <!-- Trovare -->\r\n        </v-card-text>\r\n      </v-flex>\r\n      <v-flex xs12 sm8 md8 order-xs3 order-sm2 order-md2>\r\n        <v-text-field\r\n        class=\"mx-3 mt-2\"\r\n        flat\r\n        dark\r\n        label=\"Buscar\"\r\n        prepend-inner-icon=\"search\"\r\n        solo-inverted\r\n        v-model=\"searchField\"\r\n        @keyup.enter=\"search\"\r\n        ></v-text-field>\r\n      </v-flex>\r\n\r\n      <v-flex xs6 sm2 md2 order-xs2 order-sm3 order-md3>\r\n        <v-content class=\"text-xs-right text-md-center\">\r\n            <v-bottom-nav class=\"remove-shadow\"\r\n            absolute\r\n              color=\"primary\"\r\n            >\r\n              <v-btn flat color=\"white\">\r\n                <span>Mi Cuenta</span>\r\n                <v-icon size=\"18\">account_circle</v-icon>\r\n                \r\n              </v-btn>\r\n              <router-link :to=\"{ name: 'carrito'}\">\r\n                <v-btn flat color=\"white\" >\r\n                  <span>carrito({{this.$store.getters.getCantidadCarrito}})</span>\r\n                  <v-icon size=\"18\">shopping_cart</v-icon>\r\n                  \r\n                </v-btn>\r\n              </router-link>\r\n          </v-bottom-nav>\r\n            \r\n        </v-content>\r\n      </v-flex>\r\n      <v-flex sm-12  order-xs4 order-sm4 order-md4>\r\n        <v-tabs\r\n          slot=\"extension\"\r\n          v-model=\"tabs\"\r\n          left\r\n          grow\r\n          color=\"transparent\"\r\n        >\r\n        <v-tab :to=\"{name:'categories'}\">\r\n          <v-menu :full-width=true open-on-hover nudge-bottom=40 class=\"full-with\" >\r\n            <v-btn\r\n              class=\"remove-shadow full-with\"\r\n              slot=\"activator\"\r\n              color=\"transparent\"\r\n              dark\r\n            >\r\n              Categorias\r\n              <v-icon>arrow_drop_down</v-icon> \r\n            </v-btn>\r\n            <v-list>\r\n              <v-list-tile\r\n                v-for=\"(category, index) in categories\"\r\n                :key=\"index\"\r\n                :to=\"{name:'search',query: { id: category.id}}\"\r\n              >\r\n                <v-list-tile-title>{{ category.name }}</v-list-tile-title>\r\n              </v-list-tile>\r\n            </v-list>\r\n          </v-menu>\r\n        </v-tab>\r\n        <v-tab :to=\"{name:'pedido'}\">\r\n          Pedido\r\n            <!-- <v-icon right dark>help_outline</v-icon> -->\r\n        </v-tab>\r\n        <!-- <v-tab :to=\"{name:'direccion'}\">\r\n          Direccion de invio\r\n          <v-icon right dark>location_on</v-icon>\r\n        </v-tab> -->\r\n          <!-- <v-tab\r\n            v-for=\"n in 3\"\r\n            :key=\"n\"\r\n          >\r\n            Item {{ n }}\r\n          </v-tab> -->\r\n        </v-tabs>\r\n      </v-flex>\r\n    </v-layout>\r\n  </v-card>\r\n</template>\r\n\r\n<script>\r\nimport {categoryParentUrl,carritoUrl} from '@/packages/config'\r\nexport default {\r\n    data () {\r\n      return {\r\n        tabs: null,\r\n        searchField:'',\r\n        categories: [],\r\n      }\r\n    },\r\n    created(){\r\n      // if(this.$store.state.auth.token !==null){\r\n      this.fillCategory()\r\n      this.fillCarrito()\r\n      // }\r\n    },\r\n    methods:{\r\n      fillCategory(){\r\n          this.$myApi.get(categoryParentUrl)\r\n          .then(response =>{\r\n            // console.log('categorias toolbar',response )\r\n            this.categories = response.data\r\n          })\r\n        \r\n      },\r\n      //esto lo utilizo solo para hacer consulta cuando hay dos carrito distinto \r\n      getCarritoByPedidoId(pedido_id){\r\n        return new Promise((resolve, reject) => {\r\n          this.$myApi.get(carritoUrl + '/'+ pedido_id)\r\n          .then(response =>{\r\n            // console.log('carrito ',response)\r\n            resolve(response.data.carrito)\r\n            // return response.data.carrito\r\n          })\r\n        })\r\n      },\r\n      search(){\r\n        if(this.searchField == null || this.searchField == \"\"){\r\n          this.$router.push({name:'mainPage'})\r\n        }else{\r\n          this.$router.push({ name: 'search', query: { q: this.searchField } })\r\n        }\r\n      },\r\n      fillCarrito(){\r\n        var pedido_id = localStorage.getItem('pedido_id')\r\n        var token = localStorage.getItem('access_token')\r\n\r\n        if(pedido_id == null && token != null){\r\n          this.$store.dispatch('selectPedidoByUserId')\r\n          .then(response => {\r\n          console.log('pedidoId null y toke not null',response) \r\n              if(response !== null){\r\n                this.$store.dispatch('selectCarritoByPedidoId',response.id)\r\n                .then(response =>{\r\n                console.log('carrito ',response)\r\n              })\r\n            }\r\n          })\r\n        }else if(pedido_id != null && token != null){\r\n          this.$store.dispatch('selectPedidoByUserId')\r\n          .then(response1 => {\r\n          console.log('pedidoId null y toke not null 1',response1) \r\n              if(response1 !== null){\r\n                if(response1.id !== parseInt(pedido_id)){\r\n                  //aqui solo ulitizo el metodo getCarritoByPedidoId por que solo quiero el resultado de \r\n                  //ambos carrito para luego hacer una fusion\r\n                  let userCart\r\n                  let oldCarrito\r\n                  this.getCarritoByPedidoId(parseInt(response1.id))\r\n                  .then(responseUser=>{\r\n                    userCart = responseUser\r\n                    this.getCarritoByPedidoId(parseInt(pedido_id))\r\n                    .then(responseUser=>{\r\n                      oldCarrito = responseUser\r\n                      console.log('old carrito', oldCarrito)\r\n                      console.log('userCart ', userCart)\r\n                      for(var index in oldCarrito){\r\n                        let find =  userCart.find(file => file.product_id !== oldCarrito[index].product_id)\r\n                        if(find){\r\n                          let objCart = {\r\n                            product_id:     oldCarrito[index].product_id, \r\n                            pedido_id:      find.pedido_id,\r\n                            quantity:       oldCarrito[index].quantity,\r\n                            price:          oldCarrito[index].price,\r\n                          }\r\n                          this.$store.dispatch('createAndUpdateCarrito',objCart)\r\n                        }\r\n                      }\r\n                      this.$store.dispatch('deletePedidoAndCarritoByPedidoId',oldCarrito[index].pedido_id)\r\n                      .then(responseDelete=>{\r\n                        console.log('se elimino',responseDelete)\r\n                      })\r\n                    });\r\n                  });\r\n                }else{\r\n                this.$store.dispatch('selectCarritoByPedidoId',response1.id)\r\n                .then(response3 =>{\r\n                console.log('carrito ',response3)\r\n                })\r\n              }\r\n            }\r\n        })\r\n        }else if(pedido_id != null && token == null){\r\n          this.$store.dispatch('selectPedidoById',pedido_id)\r\n          .then(response => {\r\n            console.log('pedidoId not null y toke null 2',response) \r\n              if(response !== null){\r\n                // this.$store.commit('selectPedidoByUserId',response)\r\n                this.$store.dispatch('selectCarritoByPedidoId',response.id)\r\n                .then(response1 =>{\r\n                console.log('carrito ',response1)\r\n              })\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n  .v-text-field__details{\r\n    display: none;\r\n  }\r\n  .v-item-group.v-bottom-nav .v-btn{\r\n    min-width: 62px;\r\n  }\r\n  .remove-shadow{\r\n    -webkit-box-shadow:none !important;\r\n    box-shadow:none !important;\r\n  }\r\n  .full-with{\r\n    width: 100%;\r\n  }\r\n  .estiloTitulo{\r\n    color:#fff;\r\n    text-decoration:none;   \r\n    font-family: 'Roboto', sans-serif;\r\n    line-height: 1.5;\r\n  }\r\n</style>\r\n"]}]}